package com.inception.tech.tss.view;

import android.Manifest;
import android.annotation.TargetApi;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.pm.PackageManager;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.os.Build;
import android.support.design.widget.FloatingActionButton;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Base64;
import android.view.View;
import android.view.WindowManager;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.Spinner;
import android.widget.Toast;

import com.android.volley.DefaultRetryPolicy;
import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.JsonObjectRequest;
import com.inception.tech.tss.AppController;
import com.inception.tech.tss.Ip;
import com.inception.tech.tss.R;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.ByteArrayOutputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class Profile extends AppCompatActivity {
    private EditText e1, e3, e4;

    private RadioGroup rg;
    private RadioButton rb1, rb2 , rb3;
    private String s1 = "no", designation, profileimage = "", batch = "no", email="no", name = "no" , designation1 = "no";
    private Spinner sp, sp2;
    private ImageView iv;
    private LinearLayout cv , start_loading;
    final static int TAKE_PICTURE = 1;
    int spinnerPosition;

    private ArrayAdapter<String> dataadapter, dataadapter2;
    private FloatingActionButton update ;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_profile);


        try {
            profilesetdata();
        } catch (JSONException e) {
            e.printStackTrace();
        }

        update = (FloatingActionButton) findViewById(R.id.update_btn);

        update.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                try {
                    senddata();
                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }
        });

        getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);
        cv = (LinearLayout) findViewById(R.id.batch_card);

        start_loading = (LinearLayout) findViewById(R.id.start_loading);

        iv = (ImageView) findViewById(R.id.profile_image);


        e1 = (EditText) findViewById(R.id.profile_name);

        e3 = (EditText) findViewById(R.id.profile_email);


        e4 = (EditText) findViewById(R.id.profile_mobile);


        sp = (Spinner) findViewById(R.id.spinner);
        sp2 = (Spinner) findViewById(R.id.spinner2);


        iv.setOnClickListener(new View.OnClickListener() {
            @TargetApi(Build.VERSION_CODES.M)
            @Override
            public void onClick(View v) {

                if (checkSelfPermission(Manifest.permission.READ_EXTERNAL_STORAGE)
                        != PackageManager.PERMISSION_GRANTED) {

                    // Should we show an explanation?
                    if (shouldShowRequestPermissionRationale(
                            Manifest.permission.READ_EXTERNAL_STORAGE)) {
                        // Explain to the user why we need to read the contacts
                    }

                    requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE},
                            123);

                    // MY_PERMISSIONS_REQUEST_READ_EXTERNAL_STORAGE is an
                    // app-defined int constant that should be quite unique

                    return;
                }
                Intent i = new Intent();
                i.setAction(Intent.ACTION_GET_CONTENT);
                i.setType("image/*");

                //File file = new File(Environment.getExternalStorageDirectory(),
                //      counter+".jpg");
                //Uri photoPath = Uri.fromFile(file);
                // i.putExtra(MediaStore.EXTRA_OUTPUT, photoPath);
                startActivityForResult(i, TAKE_PICTURE);
            }
        });

        List<String> categories = new ArrayList<>();
        categories.add("Student");
        categories.add("CSE Student");
        categories.add("Former Student");
        categories.add("Professor");

        dataadapter = new ArrayAdapter<String>(this, android.R.layout.simple_spinner_item, categories);
        dataadapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        sp.setAdapter(dataadapter);

        sp.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                switch (position) {
                    case 0:
                        designation = "student";
                        break;
                    case 1:
                        designation = "CSE Student";
                        cv.setVisibility(View.VISIBLE);
                        break;
                    case 2:
                        designation = "Former Student";
                        break;
                    case 3:
                        designation = "Professor";
                        break;


                }
            }


            @Override
            public void onNothingSelected(AdapterView<?> parent) {

            }
        });


        List<String> categories2 = new ArrayList<>();
        categories2.add("2011-2016");
        categories2.add("2012-2017");
        categories2.add("2013-2018");
        categories2.add("2014-2019");
        categories2.add("2015-2020");
        categories2.add("2016-2021");
        categories2.add("2017-2022");

        dataadapter2 = new ArrayAdapter<String>(this, android.R.layout.simple_spinner_item, categories2);
        dataadapter2.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        sp2.setAdapter(dataadapter2);

        sp2.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position1, long id) {


                switch (position1) {
                    case 0:
                        batch = "2011-2016";
                        break;
                    case 1:
                        batch = "2012-2017";
                        break;
                    case 2:
                        batch = "2013-2018";
                        break;
                    case 3:
                        batch = "2014-2019";
                        break;
                    case 4:
                        batch = "2015-2020";
                        break;
                    case 5:
                        batch = "2016-2017";
                        break;
                    case 6:
                        batch = "2017-2018";
                        break;


                }
            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {

            }


        });


        rg = (RadioGroup) findViewById(R.id.radiogroup);

        rg.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(RadioGroup group, int checkedId) {
                if (checkedId == R.id.male) {
                    s1 = "male";
                } else if (checkedId == R.id.female){
                    s1 = "female";
                }

                else if (checkedId == R.id.other){
                    s1 = "other";
                }


            }
        });


    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        if (resultCode == RESULT_OK && requestCode == TAKE_PICTURE && data != null) {
            Uri filePath = data.getData();
            try {
                //Getting the Bitmap from Gallery
               Bitmap bitmap2 = decodeUri(Profile.this , filePath , 700);
                profileimage = getStringImage(bitmap2);
                //Setting the Bitmap to ImageView
                iv.setImageBitmap(bitmap2);
            } catch (IOException e) {
                e.printStackTrace();
            }

        }


    }


    public String getStringImage(Bitmap bmp) {

        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        bmp.compress(Bitmap.CompressFormat.JPEG, 100, baos);
        byte[] imageBytes = baos.toByteArray();
        String encodedImage = Base64.encodeToString(imageBytes, Base64.DEFAULT);
        return encodedImage;
    }


    public void senddata() throws JSONException {


        SharedPreferences sp = getSharedPreferences("userinfo",MODE_PRIVATE);

        start_loading.setVisibility(View.VISIBLE);
        if(!e1.getText().toString().equals(""))
        {
            name = e1.getText().toString();
        }
        if(!e3.getText().toString().equals(""))
        {
            email = e3.getText().toString();
        }
        JSONObject jo = new JSONObject();
        jo.put("key1", name);
        jo.put("key2",sp.getString("userid",""));

        jo.put("key3", email);

        jo.put("key5", s1);

        if (designation == "CSE Student") {
            jo.put("key6", designation);
            jo.put("key7", batch);
            jo.put("key8", "student");
        } else {
            jo.put("key6", designation);
            jo.put("key7", "no");
            jo.put("key8", "no");


        }
        jo.put("key9", profileimage);


        Ip adress = Ip.getinstance();

        System.out.println(jo);
        String url = "http://" + adress.getIp1() + "/phpfiles/tss/addprofile.php";
        JsonObjectRequest jor = new JsonObjectRequest(url, jo, new Response.Listener<JSONObject>() {
            @Override
            public void onResponse(JSONObject response) {

                System.out.println(response);
                try {
                    if (response.getString("ekey").equals("success")) {

                        Toast.makeText(Profile.this, "profile updated", Toast.LENGTH_SHORT).show();
                        start_loading.setVisibility(View.GONE);
                    }
                    start_loading.setVisibility(View.GONE);
                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }
        }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {

                System.out.println(error);
                start_loading.setVisibility(View.GONE);
                Toast.makeText(Profile.this, "error", Toast.LENGTH_SHORT).show();
            }
        });

        AppController.getInstance().addToRequestQueue(jor);
    }


    public void profilesetdata() throws JSONException {


        final SharedPreferences sp = getSharedPreferences("userinfo", MODE_PRIVATE);
        final String s = sp.getString("userid", "");

        System.out.println(s);
        JSONObject jo = new JSONObject();
        jo.put("key1", s);


        Ip adress = Ip.getinstance();

        String url = "http://" + adress.getIp1() + "/phpfiles/tss/profilesetdata.php";
        JsonObjectRequest jor = new JsonObjectRequest(url, jo, new Response.Listener<JSONObject>() {
            @Override
            public void onResponse(JSONObject response) {
                try {
                    System.out.println("profile" + response);
                    if (response.getString("ekey").equals("found")) {
                        e1.setText(response.getString("ekey1"));
                        e3.setText(response.getString("ekey8"));
                        e4.setText(response.getString("ekey7"));
                        e4.setEnabled(false);

                        String gender = response.getString("ekey3");
                        designation1 = response.getString("ekey4");

                        rb1 = (RadioButton) findViewById(R.id.male);
                        rb2 = (RadioButton) findViewById(R.id.female);
                        rb3 = (RadioButton) findViewById(R.id.other);

                        if (gender.equals("male")) {
                            rb1.setChecked(true);
                        } else if(gender.equals("female")) {
                            rb2.setChecked(true);
                        }

                        else if(gender.equals("other")) {
                            rb3.setChecked(true);
                        }


                        if (!response.getString("ekey5").equals("no")) {
                            String batch = response.getString("ekey5");
                            int spinnerPosition2 = dataadapter2.getPosition(batch);

                            //set the default according to value
                            sp2.setSelection(spinnerPosition2);

                        }

                        if (!response.getString("ekey6").equals("no")) {
                            String profileimage = response.getString("ekey6");
                            iv.setImageBitmap(StringToBitMap(profileimage));
                        }
                        spinnerPosition = dataadapter.getPosition(designation1);
                        //set the default according to value
                        setspinner();




                        start_loading.setVisibility(View.GONE);

                    }
                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }
        }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
                System.out.println(error);
                start_loading.setVisibility(View.GONE);

            }
        });
        jor.setRetryPolicy(new DefaultRetryPolicy(30000, DefaultRetryPolicy.DEFAULT_MAX_RETRIES, DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));

        AppController.getInstance().addToRequestQueue(jor);


    }


    public Bitmap StringToBitMap(String encodedString) {
        try {
            byte[] encodeByte = Base64.decode(encodedString, Base64.DEFAULT);
            Bitmap bitmap = BitmapFactory.decodeByteArray(encodeByte, 0, encodeByte.length);

            return bitmap;
        } catch (Exception e) {
            e.getMessage();
            return null;
        }


    }


    public void setspinner() {
        sp.setSelection(spinnerPosition);
    }

    public  Bitmap decodeUri(Context c, Uri uri, final int requiredSize)
            throws FileNotFoundException {
        BitmapFactory.Options o = new BitmapFactory.Options();
        o.inJustDecodeBounds = true;
        BitmapFactory.decodeStream(c.getContentResolver().openInputStream(uri), null, o);

        int width_tmp = o.outWidth
                , height_tmp = o.outHeight;
        int scale = 1;

        while(true) {
            if(width_tmp / 2 < requiredSize || height_tmp / 2 < requiredSize)
                break;
            width_tmp /= 2;
            height_tmp /= 2;
            scale *= 2;
        }

        BitmapFactory.Options o2 = new BitmapFactory.Options();
        o2.inSampleSize = scale;
        return BitmapFactory.decodeStream(c.getContentResolver().openInputStream(uri), null, o2);
    }


}





